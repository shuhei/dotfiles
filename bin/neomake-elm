#!/usr/bin/env node

const fs = require('fs');
const exec = require('child_process').exec;

function formatEntry(entry) {
  const { type, file, region, overview } = entry;
  return [type, file, region.start.line, region.start.column, overview].join(':');
}

function formatGlobalError(filename, error) {
  // Show at line 1 column 1.
  return ['error', filename, 1, 1, error.replace(/[\r\n]+/g, ' ')].join(':');
}

function processOutput(filename, stdout, stderr) {
  // 'I cannot find module ...' error is in stderr and not a JSON.
  if (stderr) {
    writeLog(formatGlobalError(filename, stderr));
    console.log(formatGlobalError(filename, stderr));
    process.exit(1);
  }

  try {
    // Each line can be an error/warning JSON or a success message.
    const lines = stdout.split(/\n+/)
      .filter(Boolean)
      .filter(l => !l.startsWith('Successfully'));
    if (lines.length === 0) {
      process.exit(0);
    }

    const entries = [].concat(...lines.map(line => JSON.parse(line)));
    const formatted = entries.map(formatEntry).join('\n');

    writeLog(formatted);
    console.log(formatted);
    process.exit(1);
  } catch (e) {
    console.error(`Failed to parse elm-make output JSON: ${e.message}`);
    process.exit(3);
  }
}

function writeLog(message) {
  fs.writeFileSync('/Users/shuhei/bin/foo.log', message);
}

function make(filename) {
  exec(`elm-make ${filename} --report json`, (error, stdout, stderr) => {
    writeLog(['--error', error, '--out', stdout, '--err', stderr].join('\n'));
    processOutput(filename, stdout, stderr);
  });
}

make(process.argv[2]);
